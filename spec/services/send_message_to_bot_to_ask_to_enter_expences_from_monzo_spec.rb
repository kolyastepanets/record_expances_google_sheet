require 'rails_helper'

RSpec.describe SendMessageToBotToAskToEnterExpencesFromMonzo do
  subject { described_class.call(transaction_data) }

  let(:id) { "6mIsfyeVdVbitoSl" }
  let(:redis) { Redis.new }
  let(:categories) do
    {
      "Транспорт"=>["Такси", "Автобус", "Метро", "Другой", "Поезд", "Бензин", "Проездной"],
      "Еда"=>["Молочка", "Готовая", "Полуфабрикаты/морозилка", "Фрукты", "Овощи", "Сладости", "Бакалея", "Специи, приправы", "Колбаса, сосиски", "Кофе, Чай", "Новопочта", "Рыба", "Яйца", "Вода", "Хлеб и др", "Алкоголь", "К пиву", "Мясо", "Детское питание"],
      "Развлечения"=>["Ресторан", "Кино", "Другое", "Прогулка на катере", "Квадроциклы ", "Зоопарк", "Парк развлечений"],
      "Подарки"=>["мама Лили", "мама Коли", "Аня Кошовенко", "Папа Лили", "Валера", "Лиля", "Илья крестник", "Маша Степанец", "Лена Ляшко ", "Глеб Сахно", "папа Коли", "Оля Ковалевская дети", "Марина Петренко дети", "Аня Роменская", "Вероника (Дима Вика)", "Артем Косенко", "Николь", "Стефания", "Мила", "Дима Васин", "Победа", "Викуся", "Даша днепр", "Катя Кошовенко", "John Howland Jackson", "Джеки (филип, англ)", "Rachel Howland Jackson", "Rody Howland Jackson", "Женя Куть"],
      "Для дома"=>["youtube", "google", "инет", "инвентарь", "аренда кв", "комуналка", "кладовка", "Ванные принадлежности", "Кухонные принадлежности", "Ремонт", "УБС", "Аптека", "Уборка", "Сервак, впн"],
      "Коля"=>["Документы ", "Подарки", "Цветы", "Здоровье", "Одежда", "Обучение", "Мобильный", "Спорт", "Виктория", "Парикмахерская ", "Книги", "Хобби", "Игры ", "Банка", "Ванные принадлежности"],
      "Валди"=>["Корм", "Вкусняшки", "Игрушки", "Крем", "Больница", "Прививки", "Витамины", "Поводок", "Пакеты", "Коврик"],
      "Непредвиденное"=>["ж/д билеты", "% за кр лимит", "% за наличку", "Одежда", "Аптека", "Виктория папа ", "Виктория мама", "Новая почта", "Не знаю", "Фотосессия", "Недостача ", "Дорога родителям", "Кошачий корм", "Благотворительность"],
      "Марк"=>["Одежда", "Памперсы", "Больница", "Посуда", "Книги", "Игрушки", "Документы", "Обучение", "Парикмахерская ", "Дет сад"],
      "Лиля"=>["Одежда", "Красота", "Медицина", "Образование", "Мобильный", "Украшения", "Документы ", "Ванные принадлежности", "Книги"],
      "Путешествия"=>["Австрия Наличка € в гривнах ", "Танзания Наличка $ в гривнах", "Египет Наличка $ в гривнах", "Танзания тур", "Виза", "Бердянск отель", "Бердянск еда", "Бердянск билеты", "Австрия билеты", "Валди отель", "Тест на корону", "3 страховки в Европу ", "Австрия поезд", "Австрия Фуникулёр", "Австрия Сувениры", "Австрия музей", "Австрия еда, автобус, наличка", "Австрия аренда авто", "Перенос билетов", "Египет тур", "Египет штуки для тела", "Страховка", "Доверенность", "Авиа билеты", "аренда кв", "наличка $ в гривнах", "чаевые", "экскурсия", "сувениры"],
      "Инвестиции, фз"=>["фз", "инвест капитал"],
      "Авто бмоно"=>["бензин", "сто", "Акссесуары", "Мойка", "Страховка", "Парковка"],
      "Крупные покупки"=>["Кофемашина", "Airpods pro 2", "Посудомоечная машина", "Чемодан", "Фен", "iPhone", "Телек"],
      "Капитал"=>["дал в долг", "долг в путешествия", "годовой взнос клуб ч.и."],
      "Кэш"=>[]
    }
  end

  before do
    allow(ReceiveCategories).to receive(:call).and_return(categories)
    allow(CurrencyRate).to receive(:call).and_return(1.25)
  end

  context 'when 2 transactions with the same id' do
    let(:transaction_data) do
      {
        data: {
          amount: -53362,
          local_amount: -53362,
          currency: "GBP",
          local_currency: "GBP",
          balance: 3332238,
          cashbackAmount: 0,
          commissionRate: 0,
          currencyCode: 826,
          description: "На награду в моно",
          hold: true,
          id: id,
          mcc: 5969,
          operationAmount: -1195,
          originalMcc: 5969,
          receiptId: "X5H9-3T1K-4HB8-CMC5",
          time: 1661777571
        }
      }
    end
    let(:service_instance) { SendMessageToBotToAskToEnterExpencesFromMonzo.new(transaction_data) }

    before do
      allow(service_instance).to receive(:send_message_with_params).and_call_original
    end

    it 'calls send_message_with_params only once' do
      # First call with the transaction
      service_instance.call

      # Second call with the same transaction, expecting the Telegram bot not to be called this time
      service_instance.call

      expect(service_instance).to have_received(:send_message_with_params).exactly(1).times
    end
  end
end
